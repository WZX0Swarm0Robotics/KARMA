[
    {
        "role": "user",
        "content": "from skills import Explore <robot><object>, GoToObject <robot><object>, OpenObject <robot><object>, CloseObject <robot><object>, BreakObject <robot><object>, SliceObject <robot><object>, SwitchOn <robot><object>, SwitchOff <robot><object>, CleanObject <robot><object>, PickupObject <robot><object>, PutObject <robot><object><receptacleObject>, DropHandObject <robot><object>, ThrowObject <robot><object>, PushObject <robot><object>, PullObject <robot><object>\n\n\n"
    },
    {
        "role": "user",
        "content": "def GoToObject(robots, dest_obj):\n    # Navigate to the object. \n\n    # If agent knows the location of object, the agent can use this function to navigates to the object. \n    # If agent does not know the location of object, the robot should use the Explore(robots, dest_obj) to find the object.\n\n    # The function captures only those objects that are within the agent's line of sight.\n    \n    # Example: \n    # <Instruction> Go to the apple(The memory contains the location of apple). \n    # Python script: \n    # GoToObject(robot,'Apple')\n    pass\n    \ndef PickupObject(robot, pick_obj):\n    # pickup the object. \n    # The function captures only those objects that are within the agent's line of sight.\n    \n    # Example: \n    # <Instruction> Go get the apple on the kitchen counter. \n    # Python script: \n    # Explore(robot,'CounterTop')\n    # GoToObject(robot,'CounterTop')\n    # PickupObject(robot,'CounterTop')        \n    pass\n\ndef PutObject(robot, put_obj, recp): \n    # puts the current interactive object held by the agent in the designated location. \n    # This function assumes the object is already picked up.\n\n    # Example: \n    # <Instruction> put the apple on the Sink. \n    # Python script: \n    # Explore(robot,'Sink')\n    # GoToObject(robot,'Sink')\n    # PutObject(robot,'Sink')  \n    pass\n\ndef SwitchOn(robot, sw_obj):\n    # Turn on a switch. \n    \n    # Example: \n    # <Instruction> Turn on the light. \n    # Python script: \n    # SwitchOn(robot,'LightSwitch') \n    pass\n\ndef SwitchOff(robot, sw_obj):\n    # Turn off a switch. \n    \n    # Example: \n    # <Instruction> Turn off the light. \n    # Python script: \n    # SwitchOn(robot,'LightSwitch') \n    pass\n\ndef OpenObject(robot, sw_obj):\n    # Open the interaction object.\n    # This function assumes the object is already closed and the agent has already navigated to the object. \n    # Only some objects can be opened. Fridges, cabinets, and drawers are some example of objects that can be closed.\n\n    #Example: \n    # <Instruction> Get the apple in the fridge. \n    # Python script: \n    # Explore(robot,'Fridge')\n    # GoToObject(robot,'Fridge')\n    # OpenObject(robot,'Fridge') \n    # PickupObject(robot,'apple') \n    pass\n    \ndef CloseObject(robot, sw_obj):\n    # Close the interaction object.\n    # This function assumes the object is already open and the agent has already navigated to the object. \n    # Only some objects can be closed. Fridges, cabinets, and drawers are some example of objects that can be closed.\n    pass\n    \ndef BreakObject(robot, sw_obj):\n    # Break the interactable object.\n    pass\n    \ndef SliceObject(robot, sw_obj):\n    # Slice the interactable object.\n    # Only some objects can be sliced. Apple, tomato, and bread are some example of objects that can be sliced.\n\n    #Example: \n    # <Instruction> Slice an apple. \n    # Python script: \n    # Explore(robot,'Knife')\n    # GoToObject(robot,'Knife')\n    # PickupObject(robot,'Knife')\n    # Explore(robot,'Apple')\n    # GoToObject(robot,'Apple')\n    # SliceObject(robot,'Apple') \n    pass\n\ndef ThrowObject(robot, sw_obj):\n    # Throw away the object.\n    # This function assumes the object is already picked up.\n    pass\n    \ndef Explore(robot, sw_obj, position):\n    # Explore the environment in the given sequence of locations until the target object becomes visible in the robot's field of view.\n    pass\n\ndef ToggleOn(robot, sw_obj):\n    # Toggles on the interaction object.\n    # This function assumes the interaction object is already off and the agent has navigated to the object. \n    # Only some landmark objects can be toggled on. Lamps, stoves, and microwaves are some examples of objects that can be toggled on.\n\n    # Example:  \n    # <Instruction> Turn on the lamp. \n    # Python script: \n    # Explore(robot,'Lamp')\n    # GoToObject(robot,'Lamp')\n    # ToggleOn(robot,'Lamp')\n    pass\n    \ndef ToggleOff(robot, sw_obj):\n    # Toggles off the interaction object.\n    pass"
    },
    {
        "role": "system",
        "content": "You are a Robot Task Decomposition Expert.\nIf you do not know the specific location of the object involved in the task or have no memory of the object after performing previous rounds of tasks, you should use ExploreObject <robot><object> to explore where the object is. If the position information of an object is given, you should use GoToObject <robot><object> to navigate directly to the corresponding object. "
    },
    {
        "role": "user",
        "content": "Example 1 Decomposition:\n# GENERAL TASK DECOMPOSITION\n# Independent subtasks:\n# SubTask 1: wash fork in sink. (Skills Required: GoToObject, SwitchOff)\n# We should perform subtask1 first.\n# CODE\ndef wash_fork_in_sink(robot):\n    # 0: SubTask 1: wash fork in sink\n    # 1: go to the fork (because you know the position of fork, and fork is in the countertop).\n    goto(robot, 'Fork')\n    # 2: Pick up the fork.\n    PickupObject(robot, 'Fork')\n    # 4: Explore the Sink.\n    goto(robot, 'Sink')\n    # 5: wash the fork in the Sink.\n    Clean(robot, 'Fork')\n\nExample 2 Decomposition:\n# GENERAL TASK DECOMPOSITION\n# Sequence subtasks:\n# SubTask 1: Throw the Fork in the trash. (Skills Required: Explore, PickupObject, ThrowObject)\n# Since the previous tasks involved throwing utensils into the trash, let's assume that the spatula might also be in the trash if it was thrown away. If the spatula's position changed due to previous tasks, we should consider the new location.\n# SubTask 2: Wash the Fork in the sink. (Skills Required: GoToObject, PickupObject)\n# We can execute SubTask 1 first and then SubTask 2.\n\n# CODE\ndef throw_fork_in_trash_and_wash_fork_in_sink(robot):\n    # 0: SubTask 1: Throw the Fork in the trash\n    # 1: Explore the Fork.\n    available_positions = [\n        (1.25, 0, -1.75),\n        (-1.0, 0, 0),\n        (-0.25, 0, -1.5),\n        (-1.0, 0, -1.5),\n        (0.5, 0, 1.5),\n        (1.5, 0, -0.25),\n        (1.5, 0, 1.0),\n        (-2.0, 0, 2.0)\n    ]\n    Explore(robot,'Fork',available_positions)\n    # 2: Pick up the Fork.\n    PickupObject(robot,'Fork')\n    # 3: Explore the GarbageCan.\n    goto(robot,'GarbageCan')\n    # 4: Throw the Fork in the GarbageCan.\n    ThrowObject(robot,'Fork', 'GarbageCan')\n    # 5: SubTask 2: Wash the Fork in the sink\n    # 6: Go to the GarbageCan.\n    goto(robot,'Fork')\n    # 7: Pick up the Fork.\n    PickupObject(robot,'Fork')\n    # 8: Explore the Sink.\n    goto(robot,'Sink')\n    # 9: Wash the Fork in the Sink.\n    Clean(robot,'Fork')\n\nExample 3 Decomposition:\n# EXAMPLE 1 - Task Description: Turn off the light and turn on the faucet.\n# GENERAL TASK DECOMPOSITION\n# Independent subtasks:\n# SubTask 1: Turn off the light. (Skills Required: ExploreObject, SwitchOff)\n# SubTask 2: Turn on the faucet. (Skills Required: ExploreObject, SwitchOff)\n# We should perform subtask1 first and then subtask2.\n\n# CODE\ndef turn_off_light_and_turn_on_faucet(robot):\n    # 0: SubTask 1: Turn off the light\n    # 1: Explore the LightSwitch.\n    available_positions = [\n        (1.25, 0, -1.75),\n        (-1.0, 0, 0),\n        (-0.25, 0, -1.5),\n        (-1.0, 0, -1.5),\n        (0.5, 0, 1.5),\n        (1.5, 0, -0.25),\n        (1.5, 0, 1.0),\n        (-2.0, 0, 2.0)\n    ]\n    Explore(robot,'LightSwitch', available_positions)\n    # 2: Switch off the LightSwitch.\n    SwitchOff(robot,'LightSwitch')\n    # 3: SubTask 2: Turn on the faucet\n    # 4: Explore the Faucet.\n    available_positions = [\n        (1.25, 0, -1.75),\n        (-1.0, 0, 0),\n        (-0.25, 0, -1.5),\n        (-1.0, 0, -1.5),\n        (0.5, 0, 1.5),\n        (1.5, 0, -0.25),\n        (1.5, 0, 1.0),\n        (-2.0, 0, 2.0)\n    ]\n    Explore(robot,'Faucet', available_positions)\n    # 5: Switch on the Faucet.\n    SwitchOn(robot,'Faucet')\n\n"
    },
    {
        "role": "user",
        "content": "When decomposing a task, consider previously performed tasks and how they changed the object's state and position. If object's position changed, you can use GoToObject() to the new position of objects,instead of using explore() to find objects."
    },
    {
        "role": "user",
        "content": "Apple is at position (-1.61, 0.96, -0.51)."
    },
    {
        "role": "user",
        "content": "center (-1.0, 0.00, -1.5) has {Cabinet, Cabinet, Cabinet, Cabinet, CounterTop, Faucet, HousePlant, Sink, SinkBasin, StoveBurner, StoveBurner, StoveKnob, Window}\ncenter (-1, 0.00, 0.0) has {Cabinet, Cabinet, CoffeeMachine, Drawer, Drawer, Drawer, Drawer, Toaster,CounterTop, Floor, Stool, Stool}\ncenter (-2, 0.00, 2.0) has {Fridge, GarbageCan}\ncenter (-0.25, 0.00, -1.5) has {Cabinet, Cabinet, Cabinet, CounterTop, Microwave, StoveBurner, StoveBurner, StoveKnob, StoveKnob, StoveKnob}\ncenter (0.5, 0.00, 1.5) has {}\ncenter (1.25, 0.00, -1.75) has {Drawer, Drawer, Drawer, Drawer, Drawer, Shelf, Shelf, Shelf, ShelvingUnit}\ncenter (1.5, 0.00, -0.25) has {LightSwitch}\ncenter (1.5, 0.00, 1.0) has {}. \n\nIf you are using the `Explore` function, you should consider which of the aforementioned points the object is likely to be located at when passing parameters, and sort all eight points in the order of the likelihood of finding the object."
    },
    {
        "role": "user",
        "content": "Please help me decompose the following tasks: wash an apple. Please output only the generated code."
    }
]